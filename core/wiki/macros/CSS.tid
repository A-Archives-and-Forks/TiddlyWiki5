title: $:/core/macros/CSS
tags: $:/tags/Macro

\procedure actions-compile-palette(inputTitle,outputTitle)
<!-- Redefine colour function to use the input palette -->
<$let tv-palette-name=<<inputTitle>>>
	<!-- Process modern filter-based palettes -->
	<%if [<inputTitle>get[palette-type]match[modern]] %>
		<$list filter="[<inputTitle>indexes[]sort[]]" variable="colour-name">
			<$let colour-filter={{{ [<inputTitle>getindex<colour-name>] }}}>
				<!-- Note the join, needed to cope with palette entries containing spaces -->
				<$action-setfield $tiddler=<<outputTitle>> $index=<<colour-name>> $value={{{ [subfilter<colour-filter>join[ ]] }}}/>
			</$let>
		</$list>
	<%else%>
	<!-- Process legacy wikified palettes -->
		<$list filter="[<inputTitle>indexes[]sort[]]" variable="colour-name">
			<$wikify name="colour-value" text={{{ [<inputTitle>getindex<colour-name>] }}} mode="inline">
				<$action-setfield $tiddler=<<outputTitle>> $index=<<colour-name>> $value=<<colour-value>>/>
			</$wikify>
		</$list>
	<%endif%>
</$let>
\end actions-compile-palette

\procedure actions-switch-colour-palette(paletteTitle)
<$action-log $msg="switching palette" $to=<<paletteTitle>> actions-compile-palette=<<actions-compile-palette>>/>
<$action-deletetiddler $tiddler="$:/temp/palette-colours"/>
<$action-setfield $tiddler="$:/palette" $field="text" $value=<<paletteTitle>>/>
<$transclude $variable="actions-compile-palette" inputTitle="$:/palettes/Vanilla" outputTitle="$:/temp/palette-colours"/>
<$transclude $variable="actions-compile-palette" inputTitle=<<paletteTitle>> outputTitle="$:/temp/palette-colours"/>
\end actions-switch-colour-palette

\procedure tv-palette-name() $:/temp/palette-colours

\function colour(name)
[<tv-palette-name>getindex<name>] :else[[$:/config/DefaultColourMappings/]addsuffix<name>get[text]]
\end colour

\function color(name)
[function[colour],<name>]
\end color

\define box-shadow(shadow)
``
-webkit-box-shadow: $shadow$;
	-moz-box-shadow: $shadow$;
		box-shadow: $shadow$;
``
\end

\define filter(filter)
``
-webkit-filter: $filter$;
	-moz-filter: $filter$;
		filter: $filter$;
``
\end

\define transition(transition)
``
-webkit-transition: $transition$;
	-moz-transition: $transition$;
		transition: $transition$;
``
\end

\define transform-origin(origin)
``
-webkit-transform-origin: $origin$;
	-moz-transform-origin: $origin$;
		transform-origin: $origin$;
``
\end

\define background-linear-gradient(gradient)
``
background-image: linear-gradient($gradient$);
background-image: -o-linear-gradient($gradient$);
background-image: -moz-linear-gradient($gradient$);
background-image: -webkit-linear-gradient($gradient$);
background-image: -ms-linear-gradient($gradient$);
``
\end

\define column-count(columns)
``
-moz-column-count: $columns$;
-webkit-column-count: $columns$;
column-count: $columns$;
``
\end

\procedure datauri(title)
<$macrocall $name="makedatauri" type={{{ [<title>get[type]] }}} text={{{ [<title>get[text]] }}} _canonical_uri={{{ [<title>get[_canonical_uri]] }}}/>
\end

\procedure if-sidebar(text)
<$reveal state="$:/state/sidebar" type="match" text="yes" default="yes"><<text>></$reveal>
\end

\procedure if-no-sidebar(text)
<$reveal state="$:/state/sidebar" type="nomatch" text="yes" default="yes"><<text>></$reveal>
\end

\procedure if-background-attachment(text)
<$reveal state="$:/themes/tiddlywiki/vanilla/settings/backgroundimage" type="nomatch" text=""><<text>></$reveal>
\end
